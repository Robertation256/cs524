*** we have two tables 
*** reservation(hotel_id, customer_name, in_date, out_date, #reserved_rooms)
*** hotel_capacity(hotel_id, capacity)


mod HOTEL-TABLE is
    protecting NAT . 
    protecting OPTION{Nat} .


    sort Hotel Hotels .
    subsort  Hotel  < Hotels .

    op empty : -> Hotels [ctor].
    op hotel : Nat Nat -> Hotel [ctor].

    *** communtative since mongodb return results in arbitrary order
    op _,_ : Hotels Hotels -> Hotels    [ctor comm assoc id: empty] .


    op getHotelId : Hotel -> Nat .
    op getHotelCap : Hotel -> Nat .
    
    op insertHotel : Nat Nat Hotels -> Hotels .
    op getHotelCapacityById : Nat Hotels -> Option{Nat} .

    *** todo: support lookup by multiple ids

    vars hotel_id hotel_id' hotel_cap : Nat .
    var hotel_table : Hotels .


    eq getHotelId(hotel(hotel_id, hotel_cap))
        = hotel_id .

    eq getHotelCap(hotel(hotel_id, hotel_cap))
        = hotel_cap .

    eq insertHotel(hotel_id, hotel_cap, hotel_table) 
        = (hotel_table , hotel(hotel_id, hotel_cap)) .


    
    eq getHotelCapacityById(hotel_id, empty) = none .

    
    eq getHotelCapacityById(hotel_id, (hotel(hotel_id', hotel_cap), hotel_table))
        = if hotel_id == hotel_id' then hotel_cap
          else getHotelCapacityById(hotel_id, hotel_table) fi .
endm


mod HOTEL-TABLE-TEST is 
    protecting HOTEL-TABLE .

    op testTable : -> Hotels .

    eq testTable = insertHotel(1, 100, 
        insertHotel(2, 200, 
            insertHotel(3, 300, empty)
        )
    ) .

endm


mod RESERVATION-TABLE is 
    protecting NAT .
    protecting STRING . 


    sort Reservation Reservations .
    subsort  Reservation  < Reservations .

    op empty : -> Reservations [ctor].
    op reservation : Nat String Nat Nat Nat -> Reservation [ctor]. *** hotel_id, customer_name, in_date, out_date, room_count

    *** communtative since mongodb return results in arbitrary order
    op _,_ : Reservations Reservations -> Reservations    [ctor comm assoc id: empty] .



    op insertReservation : Nat String Nat Nat Nat Reservations -> Reservations .

    vars hotel_id in_date out_date room_count : Nat .
    var customer_name String .
    var reservation_table : Reservations .

    eq insertReservation(hotel_id, customer_name, in_date, out_date, room_count, reservation_table) 
        = (reservation_table , reservation(hotel_id, customer_name, in_date, out_date, room_count, reservation_table)) .


endm 


mod MONGODB is 
    protecting NAT .
    protecting STRING .
    protecting HOTEL-TABLE .
    protecting RSERVATION-TABLE .
    including CONFIGURATION .



        *** class definition
    op DatabaseServer : -> Cid [ctor] . 
    op hotelTable :_ : Hotels -> Attribute [ctor] . 
    op reservationTable :_ : Reservations -> Attribute [ctor] .





endm








