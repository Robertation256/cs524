
mod RESERVATION-SERVER is

    protecting NAT .
    protecting MEMCACHE .
    protecting MONGODB .
    protecting OPTION{Nat} .
    protecting LOOSE-COMPARE .

    including CONFIGURATION .

    sorts State .



    *** server object definition
    op ReservationServer : -> Cid [ctor] . 
    op threadCounter :_ : Nat -> Attribute [ctor] .
    op memcache :_ : Oid -> Attribute [ctor] . 
    op mongodb :_ : Oid -> Attribute [ctor] . 

    *** thread object definition
    op Thread : -> Cid [ctor] .
    op state :_ : State -> Attribute [ctor] .
    op clientId :_ : Oid -> Attribute [ctor] .
    op customerName :_ : String -> Attribute [ctor] .
    op sessionId :_ : Nat -> Attribute [ctor] .
    op hotelId :_ : Nat -> Attribute [ctor] .
    op inDate :_ : Nat -> Attribute [ctor] .
    op outDate :_ : Nat -> Attribute [ctor] .
    op dateIter :_ : Nat -> Attribute [ctor] .
    op roomCount :_ : Nat -> Attribute [ctor] .
    op map :_ : Map -> Attribute [ctor] .
    op hotelCap :_ : Nat -> Attribute [ctor] .        *** tmp var 
    op mapIter :_ : Map -> Attribute [ctor] . *** tmp var

    

    *** messages
    op reservationRequest : Oid Oid Nat String Nat Nat Nat Nat -> Msg [ctor] .  *** sender_id, receiver_id, session_id,  customer_name, hotel_id, in_date, out_date, room_count
    op reservationResponse : Oid Oid Nat Option{Nat} -> Msg [ctor] . *** sender_id, receiver_id, session_id, hotel_id (none if reservation failed)





    *** instruction labels
    ops checkLoop occupancyCacheReadWait occupancyCacheWriteWait occupancyDBWait
        capCacheReadWait capCacheWriteWait capDBWait 
        cacheWriteLoop dbWriteLoop dbReservationWriteWait
        reservationFailed : -> State .



    *** utility functions
    op branch : Bool Configuration Configuration -> Configuration .
    op _/_ : Oid Nat -> Oid .

    


    vars client-id server-id memcache-id mongodb-id : Oid .
    var customer-name : String .
    vars thread-counter session-id hotel-id in-date out-date room-count date-iter hotel-cap value : Nat .
    var condition : Bool .
    var occupiedRoomMap : Map .
    vars true-branch false-branch : Configuration .
    var cacheLookupResult : Option{Nat} .
    var reservations : Reservations .
    var hotels : Hotels .
    var isWriteSuccess : Bool .
    var map-iter : Map .
    var key : CacheKey .



    eq branch(true, true-branch, false-branch) = true-branch .
    eq branch(false, true-branch, false-branch) = false-branch .






    *** return none if in_date >= out_date, or requests zero rooms
    rl [create-thread] :
        < server-id : ReservationServer | memcache : memcache-id , mongodb : mongodb-id, threadCounter : thread-counter >
        reservationRequest(client-id, server-id, session-id, customer-name, hotel-id, in-date, out-date, room-count)
        => 
        < server-id : ReservationServer | memcache : memcache-id , mongodb : mongodb-id, threadCounter : s(thread-counter) >
        < server-id / thread-counter : Thread | 
            state : checkLoop ,
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,
            dateIter : in-date ,            *** setup iterator
            roomCount : room-count ,
            map : empty,
            memcache : memcache-id , mongodb : mongodb-id 
        > .



    *** first check memcache for number of occupied rooms
    rl [capcity-lookup-loop] :
        < server-id / thread-counter : Thread | 
            state : checkLoop ,
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,
            dateIter : date-iter ,
            roomCount : room-count ,
            map : occupiedRoomMap ,
            memcache : memcache-id , mongodb : mongodb-id 
        >
        =>
        branch(
            (date-iter <? out-date),
            (   
                getRequest(server-id / thread-counter, memcache-id, session-id, occupKey(hotel-id, date-iter)) 
                < server-id / thread-counter : Thread | 
                    state : occupancyCacheReadWait ,
                    clientId : client-id ,
                    customerName : customer-name ,
                    sessionId : session-id ,
                    hotelId : hotel-id ,
                    inDate : in-date ,
                    outDate : out-date ,
                    dateIter : date-iter ,
                    roomCount : room-count ,
                    map : occupiedRoomMap ,
                    memcache : memcache-id , mongodb : mongodb-id 
                >
            ),
            (
                < server-id / thread-counter : Thread |              
                    state : cacheWriteLoop ,       *** done checking, now write new occupancy to cache
                    clientId : client-id ,
                    customerName : customer-name ,
                    sessionId : session-id ,
                    hotelId : hotel-id ,
                    inDate : in-date ,
                    outDate : out-date ,
                    roomCount : room-count ,
                    map : occupiedRoomMap ,
                    mapIter : occupiedRoomMap ,
                    memcache : memcache-id , mongodb : mongodb-id 
                >

            )
        ) .


    *** cache hit looking for room occupancy
    rl [branch-on-occupancy-cache-result] : 
        getResponse(memcache-id, server-id / thread-counter, session-id, cacheLookupResult)
        < server-id / thread-counter : Thread | 
            state : occupancyCacheReadWait ,
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,
            dateIter : date-iter ,
            roomCount : room-count ,
            map : occupiedRoomMap ,
            memcache : memcache-id , mongodb : mongodb-id 
        >
        =>
        branch(
            (cacheLookupResult == none) ,
            (
                reservationQueryRequest(server-id / thread-counter, mongodb-id, session-id, hotel-id, date-iter) ***todo: query DB for occupancy
                < server-id / thread-counter : Thread | 
                    state : occupancyDBWait ,       *** wait for DB response
                    clientId : client-id ,
                    customerName : customer-name ,
                    sessionId : session-id ,
                    hotelId : hotel-id ,
                    inDate : in-date ,
                    outDate : out-date ,
                    dateIter : date-iter ,
                    roomCount : room-count ,
                    map : occupiedRoomMap ,
                    memcache : memcache-id , mongodb : mongodb-id 
                >
            ) ,
            (
                getRequest(server-id / thread-counter, memcache-id, session-id, capKey(hotel-id))
                < server-id / thread-counter : Thread | 
                    state : capCacheReadWait ,       *** look up hotel capacity in cache
                    clientId : client-id ,
                    customerName : customer-name ,
                    sessionId : session-id ,
                    hotelId : hotel-id ,
                    inDate : in-date ,
                    outDate : out-date ,
                    dateIter : date-iter ,       
                    roomCount : room-count ,
                    *** todo: fix option typing
                    map : insert(occupKey(hotel-id, date-iter),  value(cacheLookupResult) + room-count,   occupiedRoomMap) ,  *** document occupancy in local map
                    memcache : memcache-id , mongodb : mongodb-id 
                >
            )
        ) .


    rl [handle-db-occupancy-lookup-response] : 
        reservationQueryResponse(mongodb-id, server-id / thread-counter, session-id, reservations)
        < server-id / thread-counter : Thread | 
            state : occupancyDBWait ,       *** wait for DB response
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,
            dateIter : date-iter ,
            roomCount : room-count ,
            map : occupiedRoomMap ,
            memcache : memcache-id , mongodb : mongodb-id 
        >
        =>
        getRequest(server-id / thread-counter, memcache-id, session-id, capKey(hotel-id))
        < server-id / thread-counter : Thread | 
            state : capCacheReadWait ,       *** look up hotel capacity in cache
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,
            dateIter : date-iter ,       
            roomCount : room-count ,
            map : insert(occupKey(hotel-id, date-iter),  countTotalOccupancy(reservations) + room-count,   occupiedRoomMap) ,  *** document occupancy in local map
            memcache : memcache-id , mongodb : mongodb-id 
        > .

    
    rl [handle-cache-cap-lookup-response] : 
        getResponse(memcache-id, server-id / thread-counter, session-id, cacheLookupResult)
        < server-id / thread-counter : Thread | 
            state : capCacheReadWait ,     
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,
            dateIter : date-iter ,       
            roomCount : room-count ,
            map : occupiedRoomMap ,  
            memcache : memcache-id , mongodb : mongodb-id 
        >
        =>
        branch(
            (cacheLookupResult == none) ,   
            (
                hotelQueryRequest(server-id / thread-counter, mongodb-id, session-id, hotel-id)  *** query DB on cache miss
                < server-id / thread-counter : Thread | 
                    state : capDBWait ,        *** wait for DB response
                    clientId : client-id ,
                    customerName : customer-name ,
                    sessionId : session-id ,
                    hotelId : hotel-id ,
                    inDate : in-date ,
                    outDate : out-date ,
                    dateIter : date-iter ,       
                    roomCount : room-count ,
                    map : occupiedRoomMap ,  
                    memcache : memcache-id , mongodb : mongodb-id 
                >

            ) ,
            (
                branch(
                    (value(cacheLookupResult) <? value(occupiedRoomMap[occupKey(hotel-id, date-iter)])) ,
                    *** failure upon exceeding capacity
                    < server-id / thread-counter : Thread | state : reservationFailed , clientId : client-id , sessionId : session-id > , 
                    *** passes capacity check for current date, jump back to loop head
                    < server-id / thread-counter : Thread | 
                        state : checkLoop ,     
                        clientId : client-id ,
                        customerName : customer-name ,
                        sessionId : session-id ,
                        hotelId : hotel-id ,
                        inDate : in-date ,
                        outDate : out-date ,
                        dateIter : s(date-iter) ,       *** increment iterator       
                        roomCount : room-count ,
                        map : occupiedRoomMap ,  
                        memcache : memcache-id , mongodb : mongodb-id 
                    >
                )
            )
        ) .

    rl [handle-db-cap-lookup-response] :
        < server-id / thread-counter : Thread | 
            state : capDBWait ,        *** wait for DB response
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,
            dateIter : date-iter ,       
            roomCount : room-count ,
            map : occupiedRoomMap ,  
            memcache : memcache-id , mongodb : mongodb-id 
        >
        hotelQueryResponse(mongodb-id, server-id / thread-counter, session-id, hotels)
        =>
        branch(
            (hotels == empty) ,
            *** failed to find the corresponding hotel
            < server-id / thread-counter : Thread | state : reservationFailed , clientId : client-id , sessionId : session-id > , 
            *** write back to cache
            (
                setRequest(server-id / thread-counter, memcache-id, session-id, capKey(hotel-id), getHotelCap(hotels))
                < server-id / thread-counter : Thread | 
                    state : capCacheWriteWait ,        *** wait for cache write response
                    clientId : client-id ,
                    customerName : customer-name ,
                    sessionId : session-id ,
                    hotelId : hotel-id ,
                    inDate : in-date ,
                    outDate : out-date ,
                    dateIter : date-iter ,       
                    roomCount : room-count ,
                    map : occupiedRoomMap ,  
                    memcache : memcache-id , mongodb : mongodb-id,
                    hotelCap : getHotelCap(hotels)
                >
            )
        ) .

    rl [handle-cap-cache-write-response] : 
        setResponse(memcache-id, server-id / thread-counter, session-id)
        < server-id / thread-counter : Thread | 
            state : capCacheWriteWait ,        *** wait for cache write response
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,
            dateIter : date-iter ,       
            roomCount : room-count ,
            map : occupiedRoomMap ,  
            memcache : memcache-id , mongodb : mongodb-id,
            hotelCap : hotel-cap
        >
        =>
        branch(
            (hotel-cap <? value(occupiedRoomMap[occupKey(hotel-id, date-iter)])) ,
            *** failure due to exceeding capacity
            < server-id / thread-counter : Thread | state : reservationFailed , clientId : client-id , sessionId : session-id > , 
            < server-id / thread-counter : Thread | 
                state : checkLoop ,        *** jump back to loop head
                clientId : client-id ,
                customerName : customer-name ,
                sessionId : session-id ,
                hotelId : hotel-id ,
                inDate : in-date ,
                outDate : out-date ,
                dateIter : s(date-iter) ,   *** increment iterator       
                roomCount : room-count ,
                map : occupiedRoomMap ,  
                memcache : memcache-id , mongodb : mongodb-id
            >
        ) .

    rl [occupancy-cache-write-loop] : 
        < server-id / thread-counter : Thread |              
            state : cacheWriteLoop ,       
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,      
            roomCount : room-count ,
            map : occupiedRoomMap ,
            mapIter : (map-iter, key |-> value) ,
            memcache : memcache-id , mongodb : mongodb-id 
        >
        =>
        setRequest(server-id / thread-counter, memcache-id, session-id, key, value )
        < server-id / thread-counter : Thread |              
            state : occupancyCacheWriteWait ,       
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,       
            roomCount : room-count ,
            map : occupiedRoomMap ,
            mapIter : map-iter,
            memcache : memcache-id , mongodb : mongodb-id 
        > .
        


    rl [occupancy-cache-write-loop-break] : 
        < server-id / thread-counter : Thread |              
            state : cacheWriteLoop ,       
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,         
            roomCount : room-count ,
            map : occupiedRoomMap ,
            mapIter : empty ,
            memcache : memcache-id , mongodb : mongodb-id 
        >
        =>
        < server-id / thread-counter : Thread |              
            state : dbWriteLoop ,       *** jump to db reservation write loop
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,
            dateIter : in-date ,        *** reset iterator          
            roomCount : room-count ,
            map : occupiedRoomMap ,
            memcache : memcache-id , mongodb : mongodb-id 
        > .
        
    
    rl [handle-cache-occupancy-write-response] : 
        setResponse(memcache-id, server-id / thread-counter,  session-id)
        < server-id / thread-counter : Thread |              
            state : occupancyCacheWriteWait ,       
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,      
            roomCount : room-count ,
            map : occupiedRoomMap ,
            mapIter : map-iter ,
            memcache : memcache-id , mongodb : mongodb-id 
        >
        =>
        < server-id / thread-counter : Thread |              
            state : cacheWriteLoop ,     *** jump back to cache write loop head
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,
            roomCount : room-count ,
            map : occupiedRoomMap ,
            mapIter : map-iter ,
            memcache : memcache-id , mongodb : mongodb-id 
        > .
    

    rl [db-write-loop] :
        < server-id / thread-counter : Thread |              
            state : dbWriteLoop ,       
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,
            dateIter : date-iter ,               
            roomCount : room-count ,
            map : occupiedRoomMap ,
            memcache : memcache-id , mongodb : mongodb-id 
        >
        =>
        branch(
            (date-iter <? out-date) ,
            (
                insertReservationRequest(server-id / thread-counter, mongodb-id, session-id, reservation(hotel-id, customer-name, date-iter, s(date-iter), room-count))
                < server-id / thread-counter : Thread |              
                    state : dbReservationWriteWait ,       
                    clientId : client-id ,
                    customerName : customer-name ,
                    sessionId : session-id ,
                    hotelId : hotel-id ,
                    inDate : in-date ,
                    outDate : out-date ,
                    dateIter : date-iter ,               
                    roomCount : room-count ,
                    map : occupiedRoomMap ,
                    memcache : memcache-id , mongodb : mongodb-id 
                >
            ),
            reservationResponse(server-id, client-id, session-id, some(hotel-id))  *** reservation success
        ) .

    rl [handle-db-reservation-write-response] :
        insertReservationResponse(mongodb-id, server-id / thread-counter, session-id, isWriteSuccess)
        < server-id / thread-counter : Thread |              
            state : dbReservationWriteWait ,       
            clientId : client-id ,
            customerName : customer-name ,
            sessionId : session-id ,
            hotelId : hotel-id ,
            inDate : in-date ,
            outDate : out-date ,
            dateIter : date-iter ,               
            roomCount : room-count ,
            map : occupiedRoomMap ,
            memcache : memcache-id , mongodb : mongodb-id 
        >
        => 
        branch (
            isWriteSuccess ,
            < server-id / thread-counter : Thread |              
                state : dbWriteLoop ,           *** jump back to loop head
                clientId : client-id ,
                customerName : customer-name ,
                sessionId : session-id ,
                hotelId : hotel-id ,
                inDate : in-date ,
                outDate : out-date ,
                dateIter : s(date-iter) ,      *** inc iterator
                roomCount : room-count ,
                map : occupiedRoomMap ,
                memcache : memcache-id , mongodb : mongodb-id 
            >,
            *** otherwise the whole operation fails
            < server-id / thread-counter : Thread | state : reservationFailed, clientId : client-id , sessionId : session-id > 
        ) .


    *** todo : add error message    
    rl [reservation-failure] :  
        < server-id / thread-counter : Thread | state : reservationFailed, clientId : client-id , sessionId : session-id > 
        =>
        reservationResponse(server-id, client-id, session-id, none) .

endm